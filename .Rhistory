summary(cars)
str(cars)
summary(cars)
'''{r}
summary(mtcars)
summary(iris)
summary(iris)
names(iris)
iris[1,]
Person=c("A","B","C","D","E")
Age=c(15,20,25,30,35)
page=data.frame(Person, Age)
summary(page)
mean(page[,2])
mean(page$Age)
?mtcars
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
install.packages(c("caTools", "rmarkdown"))
FacVar1=as.factor(rep(c("level1","level2"),25))
FacVar2=as.factor(rep(c("levelA","levelB","levelC"),17)[-51])
FacVar3=as.factor(rep(c("levelI","levelII","levelIII","levelIV"),13)[-c(51:52)])
plot(simData$NumVar1,type="o")
plot(simData$NumVar1,type="o")
FacVar1=as.factor(rep(c("level1","level2"),25))
FacVar2=as.factor(rep(c("levelA","levelB","levelC"),17)[-51])
FacVar3=as.factor(rep(c("levelI","levelII","levelIII","levelIV"),13)[-c(51:52)])
'''{r}
FacVar1=as.factor(rep(c("level1","level2"),25))
FacVar2=as.factor(rep(c("levelA","levelB","levelC"),17)[-51])
FacVar3=as.factor(rep(c("levelI","levelII","levelIII","levelIV"),13)[-c(51:52)])
'''{r}
## 4 Numeric Vars
set.seed(123)
NumVar1=round(rnorm(n=50,mean=1000,sd=50),digits=2) ## Normal distribution
set.seed(123)
NumVar2=round(runif(n=50,min=500,max=1500),digits=2) ## Uniform distribution
set.seed(123)
NumVar3=round(rexp(n=50,rate=.001)) ## Exponential distribution
NumVar4=2001:2050
simData=data.frame(FacVar1,FacVar2,FacVar3,NumVar1,NumVar2,NumVar3,NumVar4)
'''{r}
# Plotting one number variable
'''{r}
plot(simData$NumVar1,type="o")
'''
# plotting one factor variable
'''{r FacVar3}
plot(simData$FacVar3)
'''
simData$index=1:nrow(simData)
h1=hPlot(x="index",y="NumVar1",data=simData,type="line")
library(ggplot2)
library(reshape2)
install.packages(c("mime", "Rcpp"))
simData$index=1:nrow(simData)
h1=hPlot(x="index",y="NumVar1",data=simData,type="line")
# h1$publish("h1",host="gist")
# h1$save("h1.html",cdn=TRUE)
?hplot
??hPlot
rp1 = rPlot(x="bin(NumVar1,10)", y="count(NumVar1)", data=simData, type="bar")
# rp1$publish("rp1",host="gist")
# rp1$save("rp1.html",cdn=TRUE)
library(ggplot2)
library(reshape2)
rp1 = rPlot(x="bin(NumVar1,10)", y="count(NumVar1)", data=simData, type="bar")
# rp1$publish("rp1",host="gist")
# rp1$save("rp1.html",cdn=TRUE)
rp1 = rPlot(x="bin(NumVar1,10)", y="count(NumVar1)", data=simData, type="bar")
# rp1$publish("rp1",host="gist")
# rp1$save("rp1.html",cdn=TRUE)
library(rPlot)
FacVar1=as.factor(rep(c("level1","level2"),25))
FacVar2=as.factor(rep(c("levelA","levelB","levelC"),17)[-51])
FacVar3=as.factor(rep(c("levelI","levelII","levelIII","levelIV"),13)[-c(51:52)])
## 4 Numeric Vars
set.seed(123)
NumVar1=round(rnorm(n=50,mean=1000,sd=50),digits=2) ## Normal distribution
set.seed(123)
NumVar2=round(runif(n=50,min=500,max=1500),digits=2) ## Uniform distribution
set.seed(123)
NumVar3=round(rexp(n=50,rate=.001)) ## Exponential distribution
NumVar4=2001:2050
simData=data.frame(FacVar1,FacVar2,FacVar3,NumVar1,NumVar2,NumVar3,NumVar4)
plot(simData$NumVar1,type="o") ## Index plot
---
title: "College Basketball: Season Statistics Visualizations"
author: "Granger Moch, Will Murphy"
date: "October 1, 2014"
output: pdf_document
number_sections: yes
toc: yes
---
\newpage
#Data
Using the seasonstatistics dataset, subsets will be created to visualize disinct conferences, players, and teams.
##Initiate needed libraries
```{r}
library(reshape2)
library(ggplot2)
```
##Create a subset of West Coast Conference players/teams
```{r}
westcoast=subset(Seasonstatistics, Conference== "West Coast")
```
##Make a subset of top five highest scorers from West Coast conference for 2012-2013.
```{r}
westcoast2012=subset(westcoast,Year== "2012-2013")
topfive=subset(westcoast2012,Points >580)
```
The data from this subset can now be plotted.
\newpage
#Graph Showing the Top 5 Highest Point Scorers in WCC Conference for 2012-2013 Season
```{r}
t5=ggplot(topfive,aes(x=Player, y=Points, fill=Player, label=Points)) +geom_bar(stat="identity")
t5 +ggtitle("Top 5 Highest Point Scorers in the West Coast Conference for 2012-2013 Season") +
geom_text(angle=30) +coord_flip()
```
While this graph's data density is adequate, I felt that it could display more about just how effective these top five scorers are when it comes to shooting (2 point) field goals. So, I would like to create a stacked bar plot, with the fill showing the the made field goal attempts vs missed field goal attempts.
However, the dataset provided by ESPN does not have a statistic for field goals missed...only field goals made and attempted. Having these two variables is sufficient enough to formulate the field goals missed column. The column will first be added to the dataset and then it will be populated with data.
##add Field Goals Missed column to topfive dataset (currently null)
```{r}
topfive["Field.Goals.Missed"]=NA
```
\newpage
##add data to Field Goals Missed column
```{r}
topfive$Field.Goals.Missed= (topfive$Field.Goals.Attempted - topfive$Field.Goals.Made)
```
##Create a subset holding these three relevant variables
```{r}
madeMiss <- subset(topfive, Conference=="West Coast",
select=c(Player,Field.Goals.Made, Field.Goals.Missed))
```
The fill aesthetic needs a variable by which it should fill the geoms, bars in this case.You can't use a dataframe for a fill, which is what I had initially tried. What is needed is to reshape the dataframe such that field goals made and field goals attempted become variables in one column and another column has the values for these. The third column is the column of player names.
##Reshape topfive dataset using Player as id
```{r}
topfivemelt=melt(madeMiss,id="Player") #reshaping dummydata to format needed... see the structure of dummydatamelt to understand what happened
```
\newpage
#Stacked Bar Plot of Top Five Highest Point Scorers in the WCC for 2012-2013 Season: Field Goals Made vs Missed
```{r}
ggplot(topfivemelt,aes(x=Player,y=value, fill=variable))+geom_bar(stat="identity") +coord_flip() +ylab("Field Goals Attempted") +ggtitle("Top Five Highest Point Scorers in the WCC for 2012-2013 Season: Field Goals Made vs Missed") # stacked bar plot
```
\newpage
## Regular side-by-side bar plot showing same data
```{r}
ggplot(topfivemelt,aes(x=Player,y=value,fill=variable))+geom_bar(stat="identity",position="dodge") # stacked bar plot
```
\newpage
#Most Minutes Played by Players in WCC for 2012-2013 Season
```{r}
mostminutes=subset(westcoast2012, Minutes > 1190)
mm=ggplot(mostminutes,aes(x=mostminutes$Player, y=mostminutes$Minutes, fill=Player, label=Minutes))+geom_bar(stat="identity")+xlab("Players")+ylab("Minutes")+ggtitle("Most Minutes Played by WCC Players in 2012-2013")
mm
```
\newpage
##Improved readability of data
```{r}
mm+geom_text(angle=45)
```
\newpage
##Top Five Highest Points Per Minute for WCC Players in 2012-2013
```{r}
#add Points.Per.Minute column to westcoast2012 dataset
westcoast2012["Points.Per.Minute"]=NA
#populate new column
westcoast2012$Points.Per.Minute=(westcoast2012$Points/westcoast2012$Minute)
westcoast2012["Points.Per.Minute.Rounded"]=NA
#round minutes to nearest hundredth
westcoast2012$Points.Per.Minute.Rounded= format(round(westcoast2012$Points.Per.Minute,3))
#create subset that removes non integers/ infinite values and places contraint on points per minute to narrow down to 5 players
ppm=subset(westcoast2012,westcoast2012$Points.Per.Minute.Rounded !="NaN" & westcoast2012$Points.Per.Minute.Rounded !="Inf" & westcoast2012$Points.Per.Minute.Rounded > .53)
ggplot(ppm, aes(x=Player,y=Points.Per.Minute, fill=Player, label=Points.Per.Minute.Rounded)) +geom_bar(stat="identity") +ggtitle("Top Five Highest Points Per Minute for WCC Players in 2012-2013") +geom_text(angle=45)
```
plot(simData$NumVar1,type="o") ## Index plot
plot(simData$NumVar1,type="o")
plot(simData$NumVar1,type="o")
```{r, echo=FALSE}
plot(simData$NumVar1,type="o")
```{r}
#Data
If we want to start simulating data of 3 factor variables and 4 numeric variables we need to properly set up parameters.
## 3 Factor Variables
FacVar1=as.factor(rep(c("level1","level2"),25))
FacVar2=as.factor(rep(c("levelA","levelB","levelC"),17)[-51])
FacVar3=as.factor(rep(c("levelI","levelII","levelIII","levelIV"),13)[-c(51:52)])
## 4 Numeric Vars
set.seed(123)
NumVar1=round(rnorm(n=50,mean=1000,sd=50),digits=2) ## Normal distribution
set.seed(123)
NumVar2=round(runif(n=50,min=500,max=1500),digits=2) ## Uniform distribution
set.seed(123)
NumVar3=round(rexp(n=50,rate=.001)) ## Exponential distribution
NumVar4=2001:2050
simData=data.frame(FacVar1,FacVar2,FacVar3,NumVar1,NumVar2,NumVar3,NumVar4)
## Now that we have simulated the data we can start creating charts and graphs
If  we want to plot an index plot we can use this code
plot(simData$NumVar1,type="o") ## Index plot
```{r}
```
```{r, echo=FALSE}
plot(simData$NumVar1,type="o")
```{r}
plot(simData$NumVar1,type="o") ## Index Plot
plot(simData$NumVar1,type="o") ## Index plot
```{r}
```
```{r, echo=FALSE}
plot(simData$NumVar1,type="o") ## Index Plot
```{r}
hist(simData$NumVar1) ## histogram
plot(density(simData$NumVar1)) ## Kernel density plot
boxplot(simData$NumVar1) ## box plot
plot(simData$FacVar3) ## bar plot
counts=table(simData$FacVar3) ## get counts
labs=paste(simData$FacVar3,counts)## create labels
pie(counts,labels=labs) ## plot
plot(simData$NumVar1,type="o",ylim=c(0,max(simData$NumVar1,simData$NumVar2)))## index plot with one variable
lines(simData$NumVar2,type="o",lty=2,col="red")## add another variabl
## Let's draw density plots : https://stat.ethz.ch/pipermail/r-help/2006-August/111865.html
dv1=density(simData$NumVar1)
dv2=density(simData$NumVar2)
plot(range(dv1$x, dv2$x),range(dv1$y, dv2$y), type = "n", xlab = "NumVar1(red) and NumVar2 (blue)",
ylab = "Density")
lines(dv1, col = "red")
lines(dv2, col = "blue")
plot(simData$NumVar1,simData$NumVar2)
plot(table(simData$FacVar2,simData$FacVar3))
bartable=table(simData$FacVar2,simData$FacVar3) ## get the cross tab
barplot(bartable,beside=TRUE, legend=levels(unique(simData$FacVar2))) ## plot
barplot(bartable, legend=levels(unique(simData$FacVar2))) ## stacked
barplot(prop.table(bartable,2)*100, legend=levels(unique(simData$FacVar2))) ## stacked 100%
plot(simData$FacVar1,simData$NumVar1)
level1=simData[simData$FacVar1=="level1",]
level2=simData[simData$FacVar1=="level2",]
dv3=density(level1$NumVar1)
dv4=density(level2$NumVar1)
plot(range(dv3$x, dv4$x),range(dv3$y, dv4$y), type = "n", xlab = "NumVar1 at Level1 (red) and NumVar1 at Level2 (blue)",ylab = "Density")
lines(dv3, col = "red")
lines(dv4, col = "blue")
meanagg=aggregate(simData$NumVar1, list(simData$FacVar3), mean)
dotchart(meanagg$x,labels=meanagg$Group.1) ## Dot Chart
barplot(meanagg$x,names.arg=meanagg$Group.1)## Bar plot
par(mfrow=c(1,2))
bar1table=table(level1$FacVar2,level1$FacVar3)
barplot(bar1table,beside=TRUE, main="FacVar1=level1")
bar2table=table(level2$FacVar2,level2$FacVar3)
barplot(bar2table,beside=TRUE, main="FacVar1=level2", legend=levels(unique(level2$FacVar2)))
par(mfrow=c(1,1))
boxplot(NumVar1~interaction(FacVar1,FacVar2),data=simData)
meanaggg=aggregate(simData$NumVar1, list(simData$FacVar1,simData$FacVar2), mean)
meanaggg=meanaggg[order(meanaggg$Group.1),]
meanaggg$color[meanaggg$Group.2=="levelA"] = "red"
meanaggg$color[meanaggg$Group.2=="levelB"] = "blue"
meanaggg$color[meanaggg$Group.2=="levelC"] = "darkgreen"
dotchart(meanaggg$x,labels=meanaggg$Group.2, groups=meanaggg$Group.1,color=meanaggg$color)
interaction.plot(meanaggg$Group.2,meanaggg$Group.1,meanaggg$x,type="b", col=c(1:2),pch=c(18,24))
par(mfrow=c(1,2))
level1=meanaggg[meanaggg$Group.1=="level1",]
level2=meanaggg[meanaggg$Group.1=="level2",]
barplot(level1$x,names.arg=level1$Group.2, main="FacVar1=level1")
barplot(level2$x,names.arg=level2$Group.2, main="FacVar1=level2")
par(mfrow=c(1,1))
plot(simData$NumVar1,simData$NumVar2, col=simData$FacVar1)
legend("topright",levels(simData$FacVar1),fill=simData$FacVar1)
plot(simData$NumVar4,simData$NumVar1,type="o",ylim=c(0,max(simData$NumVar1,simData$NumVar2)))## join dots with lines
lines(simData$NumVar4,simData$NumVar2,type="o",lty=2,col="red")## add another line
radius <- sqrt( simData$NumVar3/ pi )
symbols(simData$NumVar1,simData$NumVar2,circles=radius, inches=.25,fg="white", bg="red", main="Sized by NumVar3")
pairs(simData[,4:7], col=simData$FacVar1)
setwd("C:/Users/Will/Desktop/Fall Classes/Data Vizualization/Baseball Project")
library(rCharts)
library(ggplot2)
library(reshape2)
library(dplyr)
library(scales)
library(gridExtra)
library(grid)
library(formatR)
library(googleVis)
library(knitr)
baseballdf=read.csv("batterwarfinal.csv")
baseball2=read.csv("batterwar2.csv")
dense=ggplot(baseball2, aes(WAR)) + geom_density() +ggtitle("Density of WAR of All Batters With More Than 100 Plate Appearances")
```{r fig.width=9, fig.height=7, echo=FALSE}
dense
PA <- ggplot(baseball2, aes(x=PA, y=WAR)) + geom_point() + geom_smooth(method=lm) + ggtitle("WAR Based on Plate Appearances")
PA2=PA + geom_hline(aes(yintercept=0))
PA2
G <- ggplot(baseball2, aes(x=G, y=WAR)) + geom_point() + geom_smooth(method=lm) + ggtitle("WAR Based on Games Played")
G2= G + geom_hline(aes(yintercept=0))
G2
WOBA <- ggplot(baseball2, aes(x=wOBA, y=WAR)) + geom_point() + geom_smooth(method=lm) + ggtitle("WAR based on Weighted On-Base Average (wOBA)")
WOBA2=WOBA + geom_hline(aes(yintercept=0)) + geom_vline(aes(xintercept=0.3071),linetype="dashed")
WOBA2
View(baseballdf)
top10=baseballdf %>%
arrange(desc(WAR) %>%
head(10)
top10=baseballdf %>%
arrange(desc(WAR) %>%
head(10)
top10=baseballdf %>%
arrange(desc(WAR)) %>%
head(10)
top10=baseballdf %>%
head(10)
View(top10)
ggplot(top10, aes(x=Name, y=WAR)) + geom_bar()
ggplot(top10, aes(x=Name, y=WAR)) + geom_bar(stat="identity")
View(top10)
View(baseballdf)
top10=baseballdf %>%
arrange(desc(WAR)) %>%
head(10)
View(top10)
View(baseball2)
ggplot(top10, aes(x=Name, y=WAR)) + geom_bar(stat="identity")
ggplot(top10, aes(x=Name, y=WAR, fill=Salary)) + geom_bar(stat="identity")
ggplot(top10, aes(x=Name, y=WAR, fill=percofteamwar)) + geom_bar(stat="identity")
test <- ggplot(top10, aes(x=Name, y=payroll, fill=percofpayroll)) + geom_bar(stat="identity")
test+geom_bar()
library(plyr)
test2 <- ggplot(top10, aes(x=Name, y=percofteampayroll) + geom_bar(stat="identity") + coord_flip()
test2 + geom_hline(aes(yintercept=100))
test2 + geom_hline(aes(yintercept=100))
test2 <- ggplot(top10, aes(x=Name, y=percofteampayroll) + geom_bar(stat="identity") + coord_flip()
test2 + geom_hline(aes(yintercept=100))
test2=ggplot(top10, aes(x=Name, y=percofteampayroll) + geom_bar(stat="identity") + coord_flip()
test2 + geom_hline(aes(yintercept=100))
ggplot(top10, aes(x=Name, y=percofteampayroll) + geom_bar(stat="identity") + coord_flip()
ggplot(top10, aes(x=Name, y=percofteampayroll) + geom_bar(stat="identity") + coord_flip()
ggplot(baseballdf, aes(x=Name, y=percofteampayroll) + geom_bar(stat="identity") + coord_flip()
test2=ggplot(top10, aes(x=Name, y=percofpayroll) + geom_bar(stat="identity") + coord_flip()
test2=ggplot(top10,aes(x=Name, y=percofpayroll)+geom_bar(stat="identity")+coord_flip()
test2 + geom_hline(aes(yintercept=100))
costperwin <- ggplot(baseballdf, aes(x=Team, y=teamcostperwin)) + geom_bar(stat="identity") +coord_flip()
costperwin + geom_hline(aes(yintercept=1257578))
ggplot(top10, aes(x=Name, y=percofpayroll) + geom_bar(stat="identity") + coord_flip()
ggplot(top10, aes(x=Name, y=percofpayroll)+geom_bar(stat="identity")+coord_flip()
costperwin <- ggplot(baseballdf, aes(x=Team, y=teamcostperwin)) + geom_bar(stat="identity") +coord_flip()
costperwin2=costperwin + geom_hline(aes(yintercept=1257578))
costperwin2
teamsal <- ggplot(baseballdf, aes(x=Team, y=teampayroll)) + geom_bar(stat="identity") +coord_flip()
teamsal2=teamsal + geom_hline(aes,(yintercept=115132013))
teamsal2=teamsal + geom_hline(aes,(yintercept=115132013))
teamsal + geom_hline(aes,(yintercept=115132013))
teamsal
teamsal <- ggplot(baseballdf, aes(x=Team, y=teampayroll, fill=teamwins)) + geom_bar(stat="identity") +coord_flip()
teamsal
teamsal <- ggplot(baseballdf, aes(x=Team, y=teampayroll, fill=teamwins)) + geom_bar(stat="identity") +coord_flip() + scales_x_continuous(labels=comma)
teamsal <- ggplot(baseballdf, aes(x=Team, y=teampayroll, fill=teamwins)) + geom_bar(stat="identity") +coord_flip() + scale_x_continuous(labels=comma)
teamsal
teamsal <- ggplot(baseballdf, aes(x=Team, y=teampayroll, fill=teamwins)) + geom_bar(stat="identity") +coord_flip() + scale_x_continuous()
teamsal
teamsal <- ggplot(baseballdf, aes(x=Team, y=teampayroll, fill=teamwins)) + geom_bar(stat="identity") +coord_flip() + scale_x_discrete()
teamsal
teamsal <- ggplot(baseballdf, aes(x=Team, y=teampayroll, fill=teamwins)) + geom_bar(stat="identity") +coord_flip()
teamsal
ggplot(baseball2, aes(x=teampayroll, y=teamwins)) + geom_point() + geom_smooth(method=lm)
ggplot(baseballdf, aes(x=teampayroll, y=teamwins)) + geom_point() + geom_smooth(method=lm)
ggplot(baseballdf, aes(x=teampayroll, y=teamWAR)) + geom_point() + geom_smooth(method=lm)
View(top10)
ggplot(top10, aes(x=Name, y=percofpayroll))+geom_bar(stat="identity")+coord_flip()
ggplot(top10, aes(x=Name, y=percofpayroll, fill=WAR))+geom_bar(stat="identity")+coord_flip()
teamsal
teamsal <- ggplot(baseballdf, aes(x=Team, y=teampayroll, fill=teamwins)) + geom_bar(stat="identity") +coord_flip() +scale_y_continuous()
teamsal
teamsal <- ggplot(baseballdf, aes(x=Team, y=teampayroll, fill=teamwins)) + geom_bar(stat="identity") +coord_flip() +scale_y_continuous(labels=comma)
teamsal
costperwin <- ggplot(baseballdf, aes(x=Team, y=teamcostperwin)) + geom_bar(stat="identity") +coord_flip()+scale_y_continuous(labels=comma)
costperwin2=costperwin + geom_hline(aes(yintercept=1257578))
costperwin2
gplot(baseballdf, aes(x=Team, y=teamwins)) + geom_bar(stat="identity") +coord_flip()
ggplot(baseballdf, aes(x=Team, y=teamwins)) + geom_bar(stat="identity") +coord_flip()
ggplot(baseballdf, aes(payroll))+geom_box()
ggplot(baseballdf, aes(payroll))+geom_boxplot()
ggplot(baseballdf, aes(teampayroll))+geom_boxplot()
ggplot(baseballdf, aes(y=teampayroll))+geom_boxplot()
ggplot(baseballdf, aes(x=teampayroll ,y=teampayroll))+geom_boxplot()
ggplot(baseballdf, aes(x=teampayroll ,y=teampayroll))+geom_boxplot()+x_scale_continuous(labels=comma)
ggplot(baseballdf, aes(x=teampayroll ,y=teampayroll))+geom_boxplot()+scale_x_continuous(labels=comma)
ggplot(baseballdf, aes(x=teampayroll ,y=teampayroll))+geom_boxplot()+scale_x_continuous(labels=comma)+scale_y_continuous(labels=comma)
ggplot(baseballdf, aes(x=Team ,y=teampayroll))+geom_boxplot()+scale_x_continuous(labels=comma)+scale_y_continuous(labels=comma)
ggplot(baseballdf, aes(x=Team ,y=teampayroll))+geom_boxplot()+scale_y_continuous(labels=comma)
ggplot(baseballdf, aes(x=Team ,y=teampayroll))+geom_boxplot()+scale_y_continuous(labels=comma)+coord_flip()
ggplot(baseballdf, aes(x=teampayroll ,y=teampayroll))+geom_boxplot()+scale_y_continuous(labels=comma)+coord_flip()
ggplot(baseballdf, aes(x=teampayroll ,y=teampayroll))+geom_boxplot()+scale_x_continuous()+scale_y_continuous(labels=comma)+coord_flip()
ggplot(baseballdf, aes(x=teampayroll ,y=teampayroll))+geom_boxplot()+scale_x_continuous(labels=comma)+scale_y_continuous(labels=comma)+coord_flip()
ggplot(baseballdf, aes(x=factor ,y=teampayroll))+geom_boxplot()+scale_x_continuous(labels=comma)+scale_y_continuous(labels=comma)+coord_flip()
ggplot(baseballdf, aes(x=teampayroll ,y=teampayroll))+geom_boxplot()+scale_x_continuous(labels=comma)+scale_y_continuous(labels=comma)+coord_flip()
ggplot(top10, aes(x=Name, y=percofpayroll, fill=WAR))+geom_bar(stat="identity")+coord_flip()
ggplot(top10, aes(x=Name, y=percofpayroll, fill=WAR))+geom_bar(stat="identity")+coord_flip()+geom_text(angle=0)
ggplot(top10, aes(x=Name, y=percofpayroll, fill=WAR, label=Percent of Payroll))+geom_bar(stat="identity")+coord_flip()+geom_text(angle=0)
ggplot(top10, aes(x=Name, y=percofpayroll, fill=WAR, label=percofpayroll))+geom_bar(stat="identity")+coord_flip()+geom_text(angle=0)
ggplot(top10, aes(x=Name, y=percofpayroll, fill=WAR, label=percofpayroll))+geom_bar(stat="identity")+coord_flip()+geom_text(angle=0, hjust="-1")
ggplot(top10, aes(x=Name, y=percofpayroll, fill=WAR, label=percofpayroll))+geom_bar(stat="identity")+coord_flip()+geom_text(angle=0, hjust="-0.5")+ylab("Player")+xlab("Percent of Payroll")+ggtitle("Top 10 Batters By WAR Percentage Of Their Team's Payroll")
ggplot(top10, aes(x=Name, y=WAR, label=WAR))+geom_bar(stat="identity")+coord_flip()+geom_text(angle=0, hjust="-0.5")+ylab("Player")+xlab("WAR")+ggtitle("2014 Top 10 Batters by WAR")
ggplot(top10, aes(x=Name, y=WAR, label=WAR))+geom_bar(stat="identity")+coord_flip()+geom_text(angle=0, hjust="-0.5")+ylab("WAR")+xlab("Player")+ggtitle("2014 Top 10 Batters by WAR")
top10war=ggplot(top10, aes(x=Name, y=WAR, label=WAR))+geom_bar(stat="identity")+coord_flip()+geom_text(angle=0, hjust="-0.5")+ylab("WAR")+xlab("Player")+ggtitle("2014 Top 10 Batters by WAR")
top10per=ggplot(top10, aes(x=Name, y=percofpayroll, fill=WAR, label=percofpayroll))+geom_bar(stat="identity")+coord_flip()+geom_text(angle=0, hjust="-0.5")+ylab("Percent of Payroll")+xlab("Player")+ggtitle("Top 10 Batters By WAR Percentage Of Their Team's Payroll")
top10grid=grid.arrange(top10war, top10per, ncol=2)
top10war=ggplot(top10, aes(x=Name, y=WAR, label=WAR))+geom_bar(stat="identity")+coord_flip()+geom_text(angle=0, hjust="-0.25")+ylab("WAR")+xlab("Player")+ggtitle("2014 Top 10 Batters by WAR")
top10per=ggplot(top10, aes(x=Name, y=percofpayroll, fill=WAR, label=percofpayroll))+geom_bar(stat="identity")+coord_flip()+geom_text(angle=0, hjust="-0.25")+ylab("Percent of Payroll")+xlab("Player")+ggtitle("Top 10 Batters By WAR Percentage Of Their Team's Payroll")
top10grid=grid.arrange(top10war, top10per, ncol=2)
top10per=ggplot(top10, aes(x=Name, y=percofpayroll, fill=WAR, label=percofpayroll))+geom_bar(stat="identity")+coord_flip()+geom_text(angle=0, hjust="0.25",colour="white")+ylab("Percent of Payroll")+xlab("Player")+ggtitle("Top 10 Batters By WAR Percentage Of Their Team's Payroll")
top10war=ggplot(top10, aes(x=Name, y=WAR, label=WAR))+geom_bar(stat="identity")+coord_flip()+geom_text(angle=0, hjust="0.25",colour="white")+ylab("WAR")+xlab("Player")+ggtitle("2014 Top 10 Batters by WAR")
top10grid=grid.arrange(top10war, top10per, ncol=2)
top10war=ggplot(top10, aes(x=Name, y=WAR, label=WAR))+geom_bar(stat="identity")+coord_flip()+geom_text(angle=0, hjust="0.75",colour="white")+ylab("WAR")+xlab("Player")+ggtitle("2014 Top 10 Batters by WAR")
top10per=ggplot(top10, aes(x=Name, y=percofpayroll, fill=WAR, label=percofpayroll))+geom_bar(stat="identity")+coord_flip()+geom_text(angle=0, hjust="0.5")+ylab("Percent of Payroll")+xlab("Player")+ggtitle("Top 10 Batters By WAR Percentage Of Their Team's Payroll")
top10grid=grid.arrange(top10war, top10per, ncol=2)
top10war=ggplot(top10, aes(x=Name, y=WAR, label=WAR))+geom_bar(stat="identity")+coord_flip()+geom_text(angle=0, hjust="1",colour="white")+ylab("WAR")+xlab("Player")+ggtitle("2014 Top 10 Batters by WAR")
top10grid=grid.arrange(top10war, top10per, ncol=2)
top10war=ggplot(top10, aes(x=Name, y=WAR, label=WAR))+geom_bar(stat="identity")+coord_flip()+geom_text(angle=0, hjust="1.25",colour="white")+ylab("WAR")+xlab("Player")+ggtitle("2014 Top 10 Batters by WAR")
top10grid=grid.arrange(top10war, top10per, ncol=2)
ggplot(top10, aes(x=Name, y=salary, label=salary))+geom_bar(stat="identity")+coord_flip()+geom_text(angle=0)+ylab("Salary")+xlab("Player")+ggtitle("Top 10 Batters' Salary")
ggplot(top10, aes(x=Name, y=Salary, label=Salary))+geom_bar(stat="identity")+coord_flip()+geom_text(angle=0)+ylab("Salary")+xlab("Player")+ggtitle("Top 10 Batters' Salary")
top10grid
top10grid
top10grid=grid.arrange(top10war, top10per, ncol=2)
top10grid
ggplot(top10, aes(x=Name, y=Salary, label=Salary))+geom_bar(stat="identity")+coord_flip()+geom_text(angle=0)+ylab("Salary")+xlab("Player")+ggtitle("Top 10 Batters' Salary")
ggplot(top10, aes(x=Name, y=Salary, label=Salary))+geom_bar(stat="identity")+coord_flip()+geom_text(angle=0, hjust="4")+ylab("Salary")+xlab("Player")+ggtitle("Top 10 Batters' Salary")
ggplot(top10, aes(x=Name, y=Salary, label=Salary))+geom_bar(stat="identity")+coord_flip()+geom_text(angle=0, hjust="-2")+ylab("Salary")+xlab("Player")+ggtitle("Top 10 Batters' Salary")+scale_x_continuous(labels=comma)
ggplot(top10, aes(x=Name, y=Salary, label=Salary))+geom_bar(stat="identity")+coord_flip()+geom_text(angle=0, hjust="-2")+ylab("Salary")+xlab("Player")+ggtitle("Top 10 Batters' Salary")+scale_y_continuous(labels=comma)
ggplot(top10, aes(x=Name, y=Salary, label=Salary))+geom_bar(stat="identity")+coord_flip()+geom_text(angle=0, hjust="-1")+ylab("Salary")+xlab("Player")+ggtitle("Top 10 Batters' Salary")+scale_y_continuous(labels=comma)
ggplot(top10, aes(x=Name, y=Salary, label=Salary))+geom_bar(stat="identity")+coord_flip()+geom_text(angle=0, hjust="-0.25")+ylab("Salary")+xlab("Player")+ggtitle("Top 10 Batters' Salary")+scale_y_continuous(labels=comma)
ggplot(top10, aes(x=Name, y=Salary, label=Salary))+geom_bar(stat="identity")+coord_flip()+geom_text(angle=0, hjust="-0.2")+ylab("Salary")+xlab("Player")+ggtitle("Top 10 Batters' Salary")+scale_y_continuous(labels=comma)
ggplot(top10, aes(x=Name, y=Salary, label=Salary))+geom_bar(stat="identity")+coord_flip()+geom_text(angle=0, hjust="-0.1")+ylab("Salary")+xlab("Player")+ggtitle("Top 10 Batters' Salary")+scale_y_continuous(labels=comma)
ggplot(top10, aes(x=Name, y=Salary, label=Salary))+geom_bar(stat="identity")+coord_flip()+geom_text(angle=0, hjust="-0.05")+ylab("Salary")+xlab("Player")+ggtitle("Top 10 Batters' Salary")+scale_y_continuous(labels=comma)
ggplot(top10, aes(x=Name, y=teampayroll, label=teampayroll))+geom_bar(stat="identity")+coord_flip()+geom_text(angle=0, hjust="-0.05")+ylab("Salary")+xlab("Player")+ggtitle("Top 10 Batters' Salary")+scale_y_continuous(labels=comma)
ggplot(top10, aes(x=Name, y=teampayroll, label=teampayroll))+geom_bar(stat="identity")+coord_flip()+geom_text(angle=0, hjust="-0.05",labels=comma)+ylab("Salary")+xlab("Player")+ggtitle("Top 10 Batters' Salary")+scale_y_continuous(labels=comma)
ggplot(top10, aes(x=Name, y=Salary, label=Salary))+geom_bar(stat="identity")+coord_flip()+geom_text(angle=0, hjust="-0.05")+ylab("Salary")+xlab("Player")+ggtitle("Top 10 Batters' Salary")+scale_y_continuous(labels=comma)+ylim(0, 300000)
ggplot(top10, aes(x=Name, y=Salary, label=Salary))+geom_bar(stat="identity")+coord_flip()+geom_text(angle=0, hjust="-0.05")+ylab("Salary")+xlab("Player")+ggtitle("Top 10 Batters' Salary")+scale_y_continuous(labels=comma)+ylim(0,270000)
ggplot(top10, aes(x=Name, y=Salary, label=Salary))+geom_bar(stat="identity")+coord_flip()+geom_text(angle=0, hjust="-0.05")+ylab("Salary")+xlab("Player")+ggtitle("Top 10 Batters' Salary")+scale_y_continuous(labels=comma)+xlim(0,270000)
ggplot(top10, aes(x=Name, y=Salary, label=Salary))+geom_bar(stat="identity")+coord_flip()+geom_text(angle=0, hjust="-0.05")+ylab("Salary")+xlab("Player")+ggtitle("Top 10 Batters' Salary")+scale_y_continuous(labels=comma)+ylim(0,70000)
ggplot(top10, aes(x=Team, y=teampayroll, label=teampayroll))+geom_bar(stat="identity")+coord_flip()+geom_text(angle=0, hjust="-0.05",labels=comma)+ylab("Overall Team Payroll")+xlab("Player")+ggtitle("Top 10 Batters' Teams' Player Payrolls")+scale_y_continuous(labels=comma)
ggplot(top10, aes(x=Name, y=teampayroll, label=teampayroll))+geom_bar(stat="identity")+coord_flip()+geom_text(angle=0, hjust="-0.05",labels=comma)+ylab("Overall Team Payroll")+xlab("Player")+ggtitle("Top 10 Batters' Teams' Player Payrolls")+scale_y_continuous(labels=comma)
top10$Team <- factor(top10$Team, levels = c("Rangers","Royals","Pirates","Nationals","Marlins","Brewers","Blue Jays","Athletics","Indians","Angels"))
m <-ggplot(top10, aes(x=Team, y=teampayroll))+geom_bar()
m
m <-ggplot(top10, aes(x=Team, y=teampayroll))+geom_bar(stat="identity")
m
m <-ggplot(top10, aes(x=Team, y=teampayroll))+geom_bar(stat="identity")+coord_flip()
m
m <-ggplot(top10, aes(x=Team, y=teampayroll, label=teampayroll))+geom_bar(stat="identity")+coord_flip()+geom_text(angle=0, hjust="-0.05",labels=comma)+ylab("Overall Team Payroll")+xlab("Team")+ggtitle("Total Team Salaries of the Top 10 Batters")+scale_y_continuous(labels=comma)
m
grid.arrange(top10sal, top10teamsal, ncol=2)
top10sal=ggplot(top10, aes(x=Name, y=Salary, label=Salary))+geom_bar(stat="identity")+coord_flip()+geom_text(angle=0, hjust="-0.05")+ylab("Salary")+xlab("Player")+ggtitle("Top 10 Batters' Salary")+scale_y_continuous(labels=comma)
top10teamsal=ggplot(top10, aes(x=Team, y=teampayroll, label=teampayroll))+geom_bar(stat="identity")+coord_flip()+geom_text(angle=0, hjust="-0.05",labels=comma)+ylab("Overall Team Payroll")+xlab("Team")+ggtitle("Total Team Salaries of the Top 10 Batters")+scale_y_continuous(labels=comma)
grid.arrange(top10sal, top10teamsal, ncol=2)
top10sal + ylim(0,200000)
top10sal + ylim(0,200000000)
top10sal + ylim(0,200000000) + scale_y_continuous(labels=comma)
top10sal + ylim(0,200000000)
top10teamsal + ylim(0,200000000)
grid.arrange(top10sal, top10teamsal, ncol=2)
grid.arrange(top10sal, top10teamsal, ncol=1)
top10sal + ylim(0,200000000)
top10teamsal + ylim(0,200000000)
grid.arrange(top10sal, top10teamsal, ncol=1)
top10sal
grid.arrange(top10sal, top10teamsal, ncol=1)
grid.arrange(top10sal, top10teamsal, ncol=2)
grid.arrange(top10sal, top10teamsal, ncol=2)
grid.arrange(top10sal, top10teamsal, ncol=2)
top10sal + ylim(0,175000000)
top10teamsal + ylim(0,175000000)
top10teamsal=ggplot(top10, aes(x=Team, y=teampayroll, label=teampayroll))+geom_bar(stat="identity")+coord_flip()+geom_text(angle=0, hjust="-0.05",labels=comma)+ylab("Overall Team Payroll")+xlab("Team")+ggtitle("Total Team Salaries of the Top 10 Batters")+scale_y_continuous(labels=comma)+ ylim(0,175000000)
top10teamsal=ggplot(top10, aes(x=Team, y=teampayroll, label=teampayroll))+geom_bar(stat="identity")+coord_flip()+geom_text(angle=0, hjust="-0.05",labels=comma)+ylab("Overall Team Payroll")+xlab("Team")+ggtitle("Total Team Salaries of the Top 10 Batters")+ylim(0,175000000,labels=comma)
top10teamsal=ggplot(top10, aes(x=Team, y=teampayroll, label=teampayroll))+geom_bar(stat="identity")+coord_flip()+geom_text(angle=0, hjust="-0.05",labels=comma)+ylab("Overall Team Payroll")+xlab("Team")+ggtitle("Total Team Salaries of the Top 10 Batters")+ylim(0,175000000)
top10sal=ggplot(top10, aes(x=Name, y=Salary, label=Salary))+geom_bar(stat="identity")+coord_flip()+geom_text(angle=0, hjust="-0.05")+ylab("Salary")+xlab("Player")+ggtitle("Top 10 Batters' Salary")+ylim(0,175000000)
test2=ggplot(top10,aes(x=Name, y=percofpayroll)+geom_bar(stat="identity")+coord_flip()
test2 + geom_hline(aes(yintercept=100))
test2=ggplot(top10,aes(x=Name, y=percofpayroll)+geom_bar(stat="identity")+coord_flip()
test2 + geom_hline(aes(yintercept=100))
options(warn=-1)
